#+TITLE: Org mode blogging: RSS feed
#+DATE: <2018-12-29 Sat>
#+DESCRIPTION: Instructions on how to generate an RSS feed from multiple Org mode files.

After my [[file:org-blogging-clickable-headlines.org][previous]] [[file:org-blogging-unfurling-links.org][two]] posts about Org mode blogging, yet another one.

** RSS feed

I'm not sure how many people still care about RSS, but for my blog I
still wanted to have an RSS feed. (TBH: I don't use RSS
myself ¯\_(ツ)_/¯)

Luckily, Org mode includes the =ox-rss= /contrib/ extension. Such
[[https://orgmode.org/worg/org-contrib/index.html][/contrib/ extensions]] are bundled with Org mode, but not required by
default. So you can use them without additional installation, but you
have to =(require)= them explicitly.

** ox-rss

The =ox-rss= package is a =org-export= backend derived from the HTML
backend and it exports =.org= files to a RSS =.xml= files.

But I'm putting each blog post in a separate file, while the RSS feed
should be a single file containing all posts.

** (Ab)Using the sitemap functionality

I considered writing some code myself to join all posts together, but
then I realized =org-publish= ---sort of--- has this feature already:
sitemap. =org-publish= can generate a sitemap, being an index of all
files. And it has sorting built-in. I'm already using it to generate
the [[file:index.org][landing page]] of this blog.

So to overcome the issue of a 1-to-1 export for RSS, I decided to
abuse the sitemap functionality in =org-publish=. This is the block
I'm using in =org-publish-project-alist=.

#+BEGIN_SRC emacs-lisp
  (list "blog-rss"
        :base-directory "posts"
        :base-extension "org"
        :recursive nil
        :exclude (regexp-opt '("rss.org" "index.org" "404.org"))
        :publishing-function 'rw/org-rss-publish-to-rss
        :publishing-directory "./public"
        :rss-extension "xml"
        :html-link-home rw-url
        :html-link-use-abs-url t
        :html-link-org-files-as-html t
        :auto-sitemap t
        :sitemap-filename "rss.org"
        :sitemap-title rw-title
        :sitemap-style 'list
        :sitemap-sort-files 'anti-chronologically
        :sitemap-function 'rw/format-rss-feed
        :sitemap-format-entry 'rw/format-rss-feed-entry)
#+END_SRC

The most important properties here are:

+ =:base-directory= & =:base-extension= :: These are the same as the
     HTML export. So I'm handling the same files.
+ =:exclude= :: I'm excluding some files like =index.org=.
+ =:publishing-function= :: It's a very simple function around
     =org-rss-publish-to-rss=. But it *only* calls that function when
     the filename equals =rss.org=. So any other file is *not*
     published to RSS/XML.
+ =:sitemap-function= :: It's a function calling
     =(org-list-to-subtree)= to convert the list of posts to a Org
     mode list where the top level headlines are the titles of each
     post.
+ =:sitemap-format-entry= :: Normally this would only return the title
     of each post, but in my case I'm setting this to a function that
     returns the whole body of the post, with some extra options like
     =PUBDATE= and =RSS_PERMALINK=.

The complete implementation can be found in the [[https://gitlab.com/to1ne/blog/blob/master/elisp/publish.el#L170-234][git repo]].

** Conclusion

Looking back on the code, solution seems very simple. But to be
honest, I took me quite a while to get this working properly. So I
hope I can help others with what I've built.

I've noticed everybody formats their RSS differently, but it should be
very easy to customize this solution to your needs.

-----

Comments are welcome on Reddit.
