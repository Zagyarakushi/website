#+TITLE: You can do anything in software
#+DATE: <2020-10-30 Fri>

#+begin_quote
You can do anything in software
#+end_quote

It's a quote my former colleague used every now and then. And he's right. I
remember one time we had to come up with a pretty creative solution, and I'm
still proud at the solution we found.

** A tale about touchscreens

In a previous job, I was working in a team building software for an embedded
GNU/Linux device with a touchscreen. And at one point we needed to support a
different type of touchscreen. No big deal, you think.

The old touch screen connected over a 9600 baud serial connection and constantly
sent out 16 bytes of data, one byte for each of the 8 horizon and 8 vertical
sensor wires, and a zero-terminator byte. The code in the UI application read
these bytes from ~/dev/ttyS1~ and did some complex floating point arithmetic to
process that data. To calculate the location of a touch it applies normalization
on the signals, then a 5th degree polynomial on that, and some compensation for
the cut-off at the sides.

This code was written before I was working there, but it was clear my colleagues
had spent quite a lot of time making this algorithm robust. With this
knowledge, we expected quite some trouble with the new touchscreen as well.

The new touch screen connected over I2C. You basically could read the registers
at any time and it would give you the number of touches and coordinates. It also
had an interrupt pin, so we could detect touches event-driven, rather than on a
polling basis. During testing it seemed to work pretty well, great.

We wrote a GNU/Linux driver that added a character device ~/dev/touch~ to
user-space. User-space applications could ~read~ from it to get the touches and
coordinates, and we also implemented the ~poll~ file operation to wait for
interrupts.

Okay, so we just need to change the UI application to read from I2C when a new
type of touch screen is detected. Unfortunately it was not that easy.

** The release cycle



(sorry, this is a boring part to explain why we had to be creative with a
solution, if you like you can skip to [[enter-the-os-layer][Enter the OS layer]])

The device I was working on connected to a [[https://en.wikipedia.org/wiki/Point_of_sale][POS]], using a proprietary [[https://en.wikipedia.org/wiki/Remote_procedure_call][RPC]]
protocol. This RPC could only change on major version releases, and most of the
time it also did. We released a new major version for both devices roughly every
4 months.

Our business model required the customer to pay for a major version upgrade. We
gave maintenance support for bug fixes on the last 3 versions and LTS version.

Building release packages was pretty tedious:

+ Build software packages for our device
+ Get them approved and signed by a security officer
+ Deliver that to the POS team to package in their release

Also getting it deployed at the customer's site was not easy. At the time we did
not have any tools to deploy software updates over the internet, so updates
usually only happened when a service technician was there to install the package
from DVD.

So backporting the changes for the UI application was not option.

** Enter the OS layer
   :PROPERTIES:
   :CUSTOM_ID: enter-the-os-layer
   :END:

Luckily we were in full control of the software stack on the device. The UI
application I spoke about earlier was booted by an installer application. This
installer was part of the OS and did not have the incompatibility issue with the
POS.

This is where had to get creative, we needed to find a solution so the old UI
application could work with the new touch screen. And we came up with an
emulation layer. A piece of software should translate the touches and
coordinates back to the 16 raw wire signals the UI application expected.

** Floating points

Great, we knew the math for this, we only had to reverse it. But here we had to
get creative a second time. The device driver for the touch screen was written
as a GNU/Linux driver, and floating point arithmetic in the kernel is ...
unexisting.

Here m

** todo

When a device is manufactured, it gets loaded with the latest software. But to
ensure RPC compatibility, when the device is placed in the field, the POS forces
a software upload with the version compatible with the POS version. In most
cases this was a downgrade.

Of course we could backport the UI application changes, but it would involve
more than a dozen versions. And it would be a logical nightmare. Because we
released all software together, we had an installation package of
300-400MB. That does not sound big, but most installations only had a 56k
internet connection (or worse), enough to transmit payment transaction, but not
enough for software updates. So our service technicians carried DVDs for every
maintained software version. For /only/4 versions this was a real pain, so it
would be possible to do this for more versions.

Because








It would be a logistical nightmare.
